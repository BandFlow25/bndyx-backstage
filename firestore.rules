rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if a user is a member with a specific role
    function isMemberWithRole(artistId, userId, roles) {
      let memberDoc = get(/databases/$(database)/documents/bndy_artists/$(artistId)/members/$(userId));
      return memberDoc != null && 
             memberDoc.data != null && 
             memberDoc.data.userId == userId && 
             memberDoc.data.role in roles;
    }

    // Rules for bndy_artists collection
    match /bndy_artists/{artistId} {
      // Anyone can read artist profiles
      allow read: if true;
      
      // Only authenticated users can create artists
      allow create: if request.auth != null;
      
      // Only admins and owners can update artist details
      allow update: if isMemberWithRole(artistId, request.auth.uid, ["owner", "admin"]);
      
      // Only owners can delete artists
      allow delete: if isMemberWithRole(artistId, request.auth.uid, ["owner"]);
      
      // TEMPORARY: Wide open access to members subcollection for testing
      match /members/{memberId} {
        // WARNING: This allows anyone to read/write members documents
        // This is ONLY for testing and should be replaced with proper rules
        allow read, write: if true;
      }
    }

    // TEMPORARY: Wide open access to members subcollection for testing
    match /{path=**}/members/{memberId} {
      // WARNING: This allows anyone to read/write members documents
      // This is ONLY for testing and should be replaced with proper rules
      allow read, write: if true;
    }

    // Rules for bndy_events collection
    match /bndy_events/{eventId} {
      // Anyone can read events
      allow read: if true;
      
      // Only authenticated users can create events
      allow create: if request.auth != null;
      
      // Only the creator or artist admins/owners can update events
      allow update, delete: if request.auth != null && 
                             (request.auth.uid == resource.data.createdBy || 
                              (resource.data.artistId != null && 
                               isMemberWithRole(resource.data.artistId, request.auth.uid, ["owner", "admin"])));
    }
  }
}
